generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  image            String?
  has2FA           Boolean   @default(false)
  twoFactorSecret  String?
  backupCodes      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  mexcAccounts     MexcAccount[]
  tradingConfig    TradingConfig?
  vpnConfig        VPNConfig?
  auditLogs        AuditLog[]
  
  @@map("users")
}

model MexcAccount {
  id            String    @id @default(cuid())
  userId        String
  accountName   String
  apiKey        String
  apiSecret     String
  tokenPair     String
  status        String    @default("active")
  balance       Float     @default(0)
  vpnLocation   String    @default("Singapore")
  vpnStatus     String    @default("connected")
  lastActivity  DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  
  @@map("mexc_accounts")
}

model Order {
  id            String    @id @default(cuid())
  accountId     String
  symbol        String
  side          String
  type          String
  quantity      Float
  price         Float
  status        String    @default("pending")
  mexcOrderId   String?
  createdAt     DateTime  @default(now())
  filledAt      DateTime?
  
  account       MexcAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("orders")
}

model TradingConfig {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  autoTradingEnabled      Boolean   @default(false)
  washTradingProtection   Boolean   @default(true)
  maxOrdersPerHour        Int       @default(50)
  randomDelays            Boolean   @default(true)
  userAgentRotation       Boolean   @default(true)
  requestFingerprinting   Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("trading_configs")
}

model VPNConfig {
  id                String    @id @default(cuid())
  userId            String    @unique
  provider          String    @default("nordvpn")
  autoRotate        Boolean   @default(true)
  rotationInterval  Int       @default(30)
  currentLocation   String    @default("Singapore")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("vpn_configs")
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  resource    String
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

